// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.2
// source: triage.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "chestpain";

export interface SymptomInput {
  age: number;
  gender: string;
  medicalHistory: string;
  surgicalHistory: string;
  currentMedications: string;
  smoker: boolean;
  symptomDescription: string;
  onset: string;
  aggravatingFactors: string;
  relievingFactors: string;
  associatedSymptoms: string;
}

export interface TriageResponse {
  recommendation: string;
  possibleCauses: string[];
  additionalQuestions: string[];
  educationLinks: string[];
}

function createBaseSymptomInput(): SymptomInput {
  return {
    age: 0,
    gender: "",
    medicalHistory: "",
    surgicalHistory: "",
    currentMedications: "",
    smoker: false,
    symptomDescription: "",
    onset: "",
    aggravatingFactors: "",
    relievingFactors: "",
    associatedSymptoms: "",
  };
}

export const SymptomInput: MessageFns<SymptomInput> = {
  encode(message: SymptomInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.age !== 0) {
      writer.uint32(8).int32(message.age);
    }
    if (message.gender !== "") {
      writer.uint32(18).string(message.gender);
    }
    if (message.medicalHistory !== "") {
      writer.uint32(26).string(message.medicalHistory);
    }
    if (message.surgicalHistory !== "") {
      writer.uint32(34).string(message.surgicalHistory);
    }
    if (message.currentMedications !== "") {
      writer.uint32(42).string(message.currentMedications);
    }
    if (message.smoker !== false) {
      writer.uint32(48).bool(message.smoker);
    }
    if (message.symptomDescription !== "") {
      writer.uint32(58).string(message.symptomDescription);
    }
    if (message.onset !== "") {
      writer.uint32(66).string(message.onset);
    }
    if (message.aggravatingFactors !== "") {
      writer.uint32(74).string(message.aggravatingFactors);
    }
    if (message.relievingFactors !== "") {
      writer.uint32(82).string(message.relievingFactors);
    }
    if (message.associatedSymptoms !== "") {
      writer.uint32(90).string(message.associatedSymptoms);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SymptomInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSymptomInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.age = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gender = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.medicalHistory = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.surgicalHistory = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.currentMedications = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.smoker = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.symptomDescription = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.onset = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.aggravatingFactors = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.relievingFactors = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.associatedSymptoms = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SymptomInput {
    return {
      age: isSet(object.age) ? globalThis.Number(object.age) : 0,
      gender: isSet(object.gender) ? globalThis.String(object.gender) : "",
      medicalHistory: isSet(object.medicalHistory) ? globalThis.String(object.medicalHistory) : "",
      surgicalHistory: isSet(object.surgicalHistory) ? globalThis.String(object.surgicalHistory) : "",
      currentMedications: isSet(object.currentMedications) ? globalThis.String(object.currentMedications) : "",
      smoker: isSet(object.smoker) ? globalThis.Boolean(object.smoker) : false,
      symptomDescription: isSet(object.symptomDescription) ? globalThis.String(object.symptomDescription) : "",
      onset: isSet(object.onset) ? globalThis.String(object.onset) : "",
      aggravatingFactors: isSet(object.aggravatingFactors) ? globalThis.String(object.aggravatingFactors) : "",
      relievingFactors: isSet(object.relievingFactors) ? globalThis.String(object.relievingFactors) : "",
      associatedSymptoms: isSet(object.associatedSymptoms) ? globalThis.String(object.associatedSymptoms) : "",
    };
  },

  toJSON(message: SymptomInput): unknown {
    const obj: any = {};
    if (message.age !== 0) {
      obj.age = Math.round(message.age);
    }
    if (message.gender !== "") {
      obj.gender = message.gender;
    }
    if (message.medicalHistory !== "") {
      obj.medicalHistory = message.medicalHistory;
    }
    if (message.surgicalHistory !== "") {
      obj.surgicalHistory = message.surgicalHistory;
    }
    if (message.currentMedications !== "") {
      obj.currentMedications = message.currentMedications;
    }
    if (message.smoker !== false) {
      obj.smoker = message.smoker;
    }
    if (message.symptomDescription !== "") {
      obj.symptomDescription = message.symptomDescription;
    }
    if (message.onset !== "") {
      obj.onset = message.onset;
    }
    if (message.aggravatingFactors !== "") {
      obj.aggravatingFactors = message.aggravatingFactors;
    }
    if (message.relievingFactors !== "") {
      obj.relievingFactors = message.relievingFactors;
    }
    if (message.associatedSymptoms !== "") {
      obj.associatedSymptoms = message.associatedSymptoms;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SymptomInput>, I>>(base?: I): SymptomInput {
    return SymptomInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SymptomInput>, I>>(object: I): SymptomInput {
    const message = createBaseSymptomInput();
    message.age = object.age ?? 0;
    message.gender = object.gender ?? "";
    message.medicalHistory = object.medicalHistory ?? "";
    message.surgicalHistory = object.surgicalHistory ?? "";
    message.currentMedications = object.currentMedications ?? "";
    message.smoker = object.smoker ?? false;
    message.symptomDescription = object.symptomDescription ?? "";
    message.onset = object.onset ?? "";
    message.aggravatingFactors = object.aggravatingFactors ?? "";
    message.relievingFactors = object.relievingFactors ?? "";
    message.associatedSymptoms = object.associatedSymptoms ?? "";
    return message;
  },
};

function createBaseTriageResponse(): TriageResponse {
  return { recommendation: "", possibleCauses: [], additionalQuestions: [], educationLinks: [] };
}

export const TriageResponse: MessageFns<TriageResponse> = {
  encode(message: TriageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.recommendation !== "") {
      writer.uint32(10).string(message.recommendation);
    }
    for (const v of message.possibleCauses) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.additionalQuestions) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.educationLinks) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TriageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.recommendation = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.possibleCauses.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.additionalQuestions.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.educationLinks.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriageResponse {
    return {
      recommendation: isSet(object.recommendation) ? globalThis.String(object.recommendation) : "",
      possibleCauses: globalThis.Array.isArray(object?.possibleCauses)
        ? object.possibleCauses.map((e: any) => globalThis.String(e))
        : [],
      additionalQuestions: globalThis.Array.isArray(object?.additionalQuestions)
        ? object.additionalQuestions.map((e: any) => globalThis.String(e))
        : [],
      educationLinks: globalThis.Array.isArray(object?.educationLinks)
        ? object.educationLinks.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: TriageResponse): unknown {
    const obj: any = {};
    if (message.recommendation !== "") {
      obj.recommendation = message.recommendation;
    }
    if (message.possibleCauses?.length) {
      obj.possibleCauses = message.possibleCauses;
    }
    if (message.additionalQuestions?.length) {
      obj.additionalQuestions = message.additionalQuestions;
    }
    if (message.educationLinks?.length) {
      obj.educationLinks = message.educationLinks;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TriageResponse>, I>>(base?: I): TriageResponse {
    return TriageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TriageResponse>, I>>(object: I): TriageResponse {
    const message = createBaseTriageResponse();
    message.recommendation = object.recommendation ?? "";
    message.possibleCauses = object.possibleCauses?.map((e) => e) || [];
    message.additionalQuestions = object.additionalQuestions?.map((e) => e) || [];
    message.educationLinks = object.educationLinks?.map((e) => e) || [];
    return message;
  },
};

export type TriageServiceService = typeof TriageServiceService;
export const TriageServiceService = {
  analyzeSymptoms: {
    path: "/chestpain.TriageService/AnalyzeSymptoms",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SymptomInput) => Buffer.from(SymptomInput.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SymptomInput.decode(value),
    responseSerialize: (value: TriageResponse) => Buffer.from(TriageResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TriageResponse.decode(value),
  },
} as const;

export interface TriageServiceServer extends UntypedServiceImplementation {
  analyzeSymptoms: handleUnaryCall<SymptomInput, TriageResponse>;
}

export interface TriageServiceClient extends Client {
  analyzeSymptoms(
    request: SymptomInput,
    callback: (error: ServiceError | null, response: TriageResponse) => void,
  ): ClientUnaryCall;
  analyzeSymptoms(
    request: SymptomInput,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TriageResponse) => void,
  ): ClientUnaryCall;
  analyzeSymptoms(
    request: SymptomInput,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TriageResponse) => void,
  ): ClientUnaryCall;
}

export const TriageServiceClient = makeGenericClientConstructor(
  TriageServiceService,
  "chestpain.TriageService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TriageServiceClient;
  service: typeof TriageServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
